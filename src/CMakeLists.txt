if(APPLE)
        SET(CMAKE_INSTALL_RPATH @loader_path)
else(APPLE)
        SET(CMAKE_INSTALL_RPATH "$ORIGIN/:$ORIGIN/../:$ORIGIN/../lib/")
endif(APPLE)

set(CMAKE_SHARED_LIBRARY_PREFIX "")
set(YAF_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/include ${CMAKE_BINARY_DIR} ${CMAKE_BINARY_DIR}/include)
set(YAF_DEFINITIONS "-DBUILDING_LIBYAFARAY")

# Code speedup due mathematical approximations
if (FAST_MATH)
    list(APPEND YAF_DEFINITIONS "-DFAST_MATH")
endif (FAST_MATH)

if (FAST_TRIG)
    list(APPEND YAF_DEFINITIONS "-DFAST_TRIG")
endif (FAST_TRIG)

if(WITH_MINGW_STD_THREADS AND WIN32 AND MINGW)
    list(APPEND YAF_DEPS_INCLUDE_DIRS ${MINGW_STD_THREADS_INCLUDE_DIR})
    list(APPEND YAF_DEFINITIONS "-DHAVE_MINGW_STD_THREADS")
endif(WITH_MINGW_STD_THREADS AND WIN32 AND MINGW)

if(WITH_OpenEXR)
    list(APPEND YAF_DEPS_INCLUDE_DIRS ${OPENEXR_INCLUDE_DIRS})
    list(APPEND YAF_DEPS_LIB_DIRS ${OPENEXR_LIBRARIES})
    list(APPEND YAF_DEFINITIONS "-DHAVE_OPENEXR")
endif(WITH_OpenEXR)

if(WITH_JPEG)
    list(APPEND YAF_DEPS_INCLUDE_DIRS ${JPEG_INCLUDE_DIR})
    list(APPEND YAF_DEPS_LIB_DIRS ${JPEG_LIBRARY})
    list(APPEND YAF_DEFINITIONS "-DHAVE_JPEG")
endif(WITH_JPEG)

if(WITH_PNG)
    list(APPEND YAF_DEPS_INCLUDE_DIRS ${PNG_INCLUDE_DIR})
    list(APPEND YAF_DEPS_LIB_DIRS ${PNG_LIBRARIES})
    list(APPEND YAF_DEFINITIONS "-DHAVE_PNG")
endif(WITH_PNG)

if(WITH_TIFF)
    list(APPEND YAF_DEPS_INCLUDE_DIRS ${TIFF_INCLUDE_DIR})
    list(APPEND YAF_DEPS_LIB_DIRS ${TIFF_LIBRARY})
    list(APPEND YAF_DEFINITIONS "-DHAVE_TIFF")
endif(WITH_TIFF)

if(WITH_OpenCV)
    list(APPEND YAF_DEPS_INCLUDE_DIRS ${OpenCV_INCLUDE_DIRS})
    list(APPEND YAF_DEPS_LIB_DIRS ${OpenCV_LIBRARIES})
    list(APPEND YAF_DEFINITIONS "-DHAVE_OPENCV")
endif(WITH_OpenCV)

if(WITH_Freetype)
    list(APPEND YAF_DEPS_INCLUDE_DIRS ${FREETYPE_INCLUDE_DIRS})
    list(APPEND YAF_DEPS_LIB_DIRS ${FREETYPE_LIBRARIES})
    list(APPEND YAF_DEFINITIONS "-DHAVE_FREETYPE")
endif(WITH_Freetype)

# Generating config headers
include(${CMAKE_SOURCE_DIR}/CMakeConfig/GenConfHeaders.txt)

aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/accelerator SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/background SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/color SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/common SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/camera SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/geometry SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/image SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/format SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/import SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/integrator SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/integrator/surface SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/integrator/volume SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/interface SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/interface/export SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/light SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/material SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/math SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/output SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/photon SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/render SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/sampler SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/scene/yafaray SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/scene SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/shader SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/texture SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/volume SOURCES_SUBDIR)
list(APPEND SOURCES_DIR ${SOURCES_SUBDIR})


add_library(libyafaray4 SHARED yafaray_c_api.cc ${SOURCES_DIR})
target_compile_definitions(libyafaray4 PRIVATE ${YAF_DEFINITIONS})
target_include_directories(libyafaray4 PRIVATE ${YAF_INCLUDE_DIRS})
target_include_directories(libyafaray4 SYSTEM BEFORE PRIVATE ${YAF_DEPS_INCLUDE_DIRS})
target_link_libraries(libyafaray4 PRIVATE ${YAF_DEPS_LIB_DIRS})
##install(TARGETS libyafaray4 DESTINATION)
