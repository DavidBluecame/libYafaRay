
###############################################################################
# UserConfig File                                                              
###############################################################################
# Copy this file as UserConfig.txt inside this directory to configure the      
# options and paths for your build                                             
#                                                                              
# Uncoment (remove the ## before "set") and set the values of the following lines
# to configure your build   
#                                                                              
# NOTE: the defaults work perfectly on most cases                              
# don't change anything unless you know what you're doing                      
# WARNING: DON'T TOUCH THE NEXT LINE                                           
set(YAF_USER_CONFIG ON)
#                                                                              
################################################################################


############################## Build configuration #############################

# Enable DEBUG build mode for developer testing, default:OFF
set(DEBUG_BUILD OFF)

# Build font rendering with FreeType, default: ON
set(WITH_Freetype ON)

# Build with OpenCV image processing support, default: ON
set(WITH_OpenCV ON)

# Build OpenEXR image I/O plugin, default: ON
set(WITH_OpenEXR ON)

# Build JPEG image I/O plugin, default:ON
set(WITH_JPEG ON)

# Build PNG image I/O plugin, default:ON
set(WITH_PNG ON)

# Build TIFF image I/O plugin, default:ON
set(WITH_TIFF ON)

# Enable XML Import capability (required for XML Loader), default:ON
set(WITH_XMLImport ON)

# Enable XML Loader build, default:ON
set(WITH_XML_LOADER ON)

# Enable the YafaRay Python bindings, default:ON
set(WITH_YAF_PY_BINDINGS ON)

# Enable the YafaRay Ruby bindings, default:OFF
set(WITH_YAF_RUBY_BINDINGS OFF)

# Enable Qt Gui build, default: OFF
set(WITH_QT OFF)

# Embed font for QT GUI (useful for some buggy QT installations), default: OFF
set(EMBED_FONT_QT OFF)


############################ Path setting variables ############################
# Default:                                                                     
#          "/usr/local"               on *NIX platforms                        
#          "C:\<Program_Files_Dir>"   on Windows platforms                     

##set(USER_INSTALL_PREFIX "")
                                                                              
# The executables instalation dir                                              
# this will install the binary executables in ${USER_INSTALL_PREFIX}/bin       
# NOTE: under windows platforms this is the installation path                  
# and YAF_LIB_DIR is ignored                                                   
#                                                                              
# Default: bin                                                                 

##set(YAF_BIN_DIR bin)

# The libraries instalation dir                                                
# Default: lib                                                                 
#                                                                              
# this will install the libraries and plugins in ${USER_INSTALL_PREFIX}/lib    
# NOTE: under windows platforms this variable is ignored                       

##set(YAF_LIB_DIR lib)

# The plugin instalation dir                                                   
# Default:                                                                     
#          ${YAF_LIB_DIR}/yafaray-plugins

##set(YAF_PLUGIN_DIR "")

# The plugin runtime search directory
# When yafaray is executed, it will automatically search for the "yafaray-plugins" folder in the following locations:
# * Directory specified with the "-pp" option in yafaray-xml or equivalent when using YafaRay API
# * Subdirectory "yafaray-plugins" of the current subdirectory where YafaRay is executed from.
# * Directory specified during the building process in this "YAF_RUNTIME_SEARCH_PLUGIN_DIR" variable.
# Therefore this variable should be specified considering the expected location of the plugins folder after YafaRay is installed.
# If not specified it will take the absolute plugin installation directory as defined in the CMake building process
# Default:                                                                     
#    ${CMAKE_INSTALL_PREFIX}/${YAF_PLUGIN_DIR}

##set(YAF_RUNTIME_SEARCH_PLUGIN_DIR "")

# The Python Bindings Installation Path                                        
# Default: ${YAF_LIB_DIR}
#                                                                              
# this will install the Python bindings on ${YAF_LIB_DIR}
# you can set this path to your local blender scripts directory
# or whatever suits you best

##set(YAF_BINDINGS_PY_DIR ${YAF_LIB_DIR})

# The Ruby Bindings Installation Path                                          
# Default: ${YAF_LIB_DIR}
#                                                                              
# this will install the Ruby bindings once                                     
# ${YAF_LIB_DIR}
# you can set this path to whatever suits you best                             

##set(YAF_BINDINGS_RUBY_DIR ${YAF_LIB_DIR})

# The Core include files instalation dir                                                
# Default: include/yafaray
#                                                                              
# Note: include files will not be installed when building as Blender AddOn
# By default: ${USER_INSTALL_PREFIX}/include/yafaray

##set(YAF_INCL_DIR "include/yafaray")

# The Core documentation instalation dir                                                
# Default: share/doc/yafaray
#                                                                              
# Note: this is *ignored* if YafaRay is built as a Blender Add-On. In that case, the Blender-Exporter docs will be used instead
# By default: ${USER_INSTALL_PREFIX}/share/doc/yafaray

##set(YAF_DOC_DIR "share/doc/yafaray")

# The Core tests instalation dir                                                
# Default: share/yafaray/tests
#                                                                              
# Note: this is *ignored* if YafaRay is built as a Blender Add-On. In that case, the Blender-Exporter tests will be used instead
# By default: ${USER_INSTALL_PREFIX}/share/yafaray/tests

##set(YAF_TESTS_DIR "share/yafaray/tests")


# Setting paths and directories for Dependencies
# CMAKE custom search path for dependencies, Packages, Libraries and Header Files 

##set(YAF_CMAKE_DEPENDENCIES_SEARCH_PATH "")

# Path to user-specific Libraries and Include directories
# More than one path can be set separated by spaces ie.                        
#                                                                              
#    set(YAF_USER_INCLUDE_DIRS C:/include D:/mydev/include)                    

##set(YAF_USER_INCLUDE_DIRS "")
##set(YAF_USER_LIBRARY_DIRS "")


# For MacOSX building only, path to the Xcode SDK
# Default: "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk"

##set(YAF_CMAKE_OSX_SYSROOT "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk")


######################### Building flags ######################################
# Set this variables if you wish to override the default optimization flags    
# Defaults:                                                                    
# On *nix platforms:                                                           
# set(USER_RELEASE_OPTIMIZATION_FLAGS "-std=c++11 -O3 -ffast-math")                       
# set(USER_DEBUG_OPTIMIZATION_FLAGS "-std=c++11 -ggdb")                                   
# On windows platforms:                                                        
# set(USER_RELEASE_OPTIMIZATION_FLAGS "/Ot /Ox")                               
# set(USER_DEBUG_OPTIMIZATION_FLAGS "/Zi /GS /RTC1")                           
#                                                                              
# IMPORTANT NOTE: USE QUOTATION MARKS ON THE FLAGS                             

##set(USER_RELEASE_OPTIMIZATION_FLAGS "")
##set(USER_DEBUG_OPTIMIZATION_FLAGS "")

# Set this variables if you wish to append extra compiler flags to your build  
# this ones will be appended, won't override defaults                          
#                                                                              
# IMPORTANT NOTE: USE QUOTATION MARKS ON THE FLAGS                             

##set(USER_RELEASE_EXTRA_FLAGS "")
##set(USER_DEBUG_EXTRA_FLAGS "")


######################## Executable location variables #########################
# Here you can set the paths to search for executables, you can leave blank    
# the ones you don't need                                                      
#                                                                              
# Path to swig executable                                                      

##set(YAF_USER_SWIG_BIN_DIR "")


# Path to Qt qmake executable                                                     #
##set(YAF_USER_QT_BIN_DIR "")


########################### Extra linking variables ############################
# the variable YAF_USER_EXTRA_LIBS can be used to add extra linkage in case    
# one of your dependencies has a dynamic link that is not included in the      
# default YafaRay configuration, for example libXML2 can be dynamically        
# linked against some libs like iconv and the default config doesn't include   
# iconv as a linking lib, therefore you can use:                               
#                                                                              
#    set(YAF_USER_EXTRA_LIBS -liconv)           *Syntax for GCC linker         
#    or                                                                        
#    set(YAF_USER_EXTRA_LIBS libiconv.lib)      *Syntax for MSVC linker        
#                                                                              
# to add iconv to the library linkage list, again you can specify several      
# libs at once in a list separated by spaces ie.                               
#                                                                              
#    set(YAF_USER_EXTRA_LIBS -lmylib1 -lmylib2 -lmylib2)                       
#    or                                                                        
#    set(YAF_USER_EXTRA_LIBS libmylib1.lib libmylib2.lib libmylib2.lib)        

##set(YAF_USER_EXTRA_LIBS "")


############################ Extra defines variable ############################
# Use this variable to set extra defines that your build might require         

##set(YAF_USER_EXTRA_DEFS "")


########################### Required Python version ############################
# Use this variable to set the Python version you want to use for the bindings 
# Default: 3.5                                                                 

##set(YAF_PY_VERSION 3.5)


############################## Blender Add-On ##################################
# Options for building YafaRay as a self-contained add-on for Blender          
# Default: OFF                                                                 

##set(BLENDER_ADDON ON)

# Set the path to the Blender-Exporter Python code to use when building the add-on.
# WARNING: this is REQUIRED now when building the Blender Add-On. If the path is not set, the Add-On will not be built

##set(BLENDER_EXPORTER_PATH "")

# If the path to Blender-Exporter is not set, set the Git branch to download and use when building the add-on.

##set(BLENDER_EXPORTER_BRANCH "master")


############################## Code Speed Up ###################################
# Options for building YafaRay with mathematical functions approximantions     
# Default: ON                                                                  

##set(FAST_MATH OFF)
##set(FAST_TRIG OFF)

# Use MinGW-Std-Threads 3rd party library. Useful with old MinGW versions that do not include C++11 threads libraries or where they are slower than they should. Set it to OFF with newer versions of MinGW or a conflict might happen causing crashes, default: OFF
##set(WITH_MINGW_STD_THREADS ON)


################################# End of file ##################################

